mutate(across(!elevation, as.factor)) #Con el signo de admiración antes de la variable, estamos indicando que aplique la funcion as.factor a todas las columnas menos a elevation
across_data
ordenado <- dat %>% arrange(elevation) #Ordena las observaciones de menor a mayor
View(ordenado)
separado <- dat %>% separate(species, c("specie", "genus"))
View(separado)
separado <- dat %>% separate(species, c("genus", "species"))
separado <- dat %>% separate(species, c("genus", "species"))
View(separado)
dat$species[c(226, 720, 950)] #Vemos que el epíteto de estas especies está acompañado de otra palabra separado con -. ¿Qué pasa si añadimos una tercera columna?
separado <- dat %>% separate(species, c("specie", "genus", "otro"))
separado <- dat %>% separate(species, c(NA, "genus"))
separado <- dat %>%
separate(species, c("specie", "genus"), " ", extra = "merge")#Le indicamos a la función que solo debe separar los caracteres cuando encuntre un espacio " ", y lo que queda sera único o se hará un "merge".
View(separado)
separado$genus[226]
separado <- dat %>%
separate(species, c("genus", "species"), " ", extra = "merge")#Le indicamos a la función que solo debe separar los caracteres cuando encuntre un espacio " ", y lo que queda sera único o se hará un "merge".
View(separado)
ordenado_grupo <- separado %>% arrange(genus)
View(ordenado_grupo)
x <- fruit[1:5]
x
fruir
fruit
str_detect(x, "aeiou")
str_detect(x, "[aeiou]")
str_count(x, "[aeiou]")
str_subset(x, "[aeiou]")
str_locate(x, "[aeiou]")
str_extract(x, "[aeiou]")
str_match(x, "(.)[aeiou](.)")
str_replace(x, "[aeiou]", "?")
str_split(c("a,b", "c,d,e"), ",")
which(str_detect(dat$species, "Clusia hammeliana")=="TRUE") #Buscamos la posición de una especie en particular
which(str_detect(dat$species, "sia hamm")=="TRUE")
sum(str_count(dat$municipio, "Cimitarra"))
str_subset(dat$species, "[:space:][aeiou]") #Extraemos todas las especies en la que su epíteto específico comienza con una vocal. Observe que [:space:] es una clase de caracter que se utiliza para indicar que antes de las vocales debe haber un espacio, de otra manera se obtendrían todos los registros que tuviesen alguna vocal en cualquier posición.
which(str_detect(dat$species, "123456789"))
which(str_detect(dat$species, "[:digit:]")) #La clase de caracter para encontrar cualquier número es [:digit:]
str_detect(dat$elevation, "[:digit:]")
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
setwd("~/UIS/GitHub/INNOVATIC/r-scripts")
library(ggplot2)
library(tidyverse)
dat <- read_csv("SantanderBIO.csv")
ggplot(data = dat) #La  primera capa de un ggplot es el conjunto de datos que provienen de un data frame
ggplot(data = dat) +
aes(x = class) #Luego se añade el sistema de coordenas o relación entre las variables
ggplot(data = dat) +
aes(x = class) +
geom_bar() #Y añadimos un geom_ para representar geometricamente nuestros datos. Hay que tener precaución ya que no todos las representaciones gráficas funcionan bien para la relación entre las variables que establezcamos. Ggplot realiza algunas gráficas de manera predeterminada, si solo dejamos en aes() una unica variable, este graficará el número de observaciones por cada clase que exista en esa variable (geom_bar(stat="count")), ya que convierte las variables en factores para graficarlas
dat %>%
group_by(municipio) %>%
summarise(unicos = unique(species)) %>%
ggplot(aes(x = municipio)) +
geom_bar()
summarise(unicos = unique(species))
sel = dat %>%
group_by(municipio) %>%
summarise(unicos = unique(species))
View(sel)
sel = dat %>%
group_by(municipio)
View(sel)
dat %>%
group_by(municipio) %>%
summarise(unicos = unique(species)) %>%
ggplot(aes(x = municipio)) +
geom_bar(stat="count")
? geom_bar
dat %>%
group_by(municipio) %>%
summarise(unicos = unique(species)) %>%
ggplot(aes(x = municipio, fill = municipio)) +
geom_bar()
dat %>%
group_by(municipio) %>%
summarise(unicos = unique(species)) %>%
ggplot(aes(y = municipio)) +
geom_bar(fill = c("blue", "yellow", "brown"), col = c("blue", "yellow", "brown")) # ¿Cuál es la diferencia entre fill y col?
dat %>%
group_by(municipio) %>%
summarise(unicos = unique(species)) %>%
ggplot(aes(x = municipio, fill = municipio)) +
geom_bar()
dat %>%
group_by(municipio) %>%
summarise(unicos = unique(species)) %>%
ggplot(aes(y = municipio)) +
geom_bar(col = c("blue", "yellow", "brown")) # ¿Cuál es la diferencia entre fill y col?
dat %>%
group_by(municipio) %>%
summarise(unicos = unique(species)) %>%
ggplot(aes(y = municipio)) +
geom_bar(fill = c("blue", "yellow", "brown"), col = c("blue", "yellow", "brown")) # ¿Cuál es la diferencia entre fill y col?
dat %>%
filter(class == "Mammalia")%>%
ggplot(aes(x = locality)) +
geom_bar()
mam= dat %>%
filter(class == "Mammalia")
View(mam)
dat %>%
filter(order == "Coleoptera") %>%
group_by(locality) %>%
ggplot(aes(x = locality, fill = municipio)) +
geom_bar()
dat %>%
filter(order == "Coleoptera") %>%
group_by(locality) %>%
ggplot(aes(x = municipio, fill = locality)) +
geom_bar(position =  "stack")
?geom_boxplot
dat %>%
ggplot(aes(x = municipio, y = elevation)) + #Grafico de cajas de la elevacion por cada municipio
geom_boxplot()
dat %>%
filter(class=="Aves") %>%
ggplot(aes(x = locality, y = elevation)) +
geom_boxplot()
dat %>%
ggplot(aes(elevation)) +
geom_histogram()
dat %>%
filter(kingdom == "Plantae") %>%
ggplot(aes(elevation)) +
geom_histogram()
dat %>%
filter(kingdom == "Animalia") %>%
ggplot(aes(elevation)) +
geom_histogram()
as <- dat %>% mutate(elevation_2 = elevation+10)
View(as)
dat %>% mutate(aleatorios = runif(1255, min = 0, max = 3600)) %>%
ggplot(aes(x=elevation, y=aleatorios)) + #establecemos los datos y las variables "x" y "y"
theme_minimal() #tema del grafico para personalizar color de fondo, bordes, cuadrícula, etc.
dat %>% mutate(aleatorios = runif(1255, min = 0, max = 3600)) %>%
ggplot(aes(x=elevation, y=aleatorios)) +
theme_minimal() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white")) +#definimos fondo y bordes
labs(title = "Elevación vs números aleatorios", #título
subtitle = "Data: SantanderBIO") + #subtítulo
labs(x = "Elevación", y = "Némeros aleatorios")#nombres de los ejes
dat %>% mutate(aleatorios = runif(1255, min = 0, max = 3600)) %>%
ggplot(aes(x=elevation, y=aleatorios)) + #Grafico base
geom_point() + # geometria que corresponde a los puntos
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white")) +
labs(title = "Elevación vs números aleatorios",
subtitle = "Data: SantanderBIO")
labs(x = "Elevación", y = "Némeros aleatorios")
dat %>% mutate(aleatorios = runif(1255, min = 0, max = 3600)) %>%
ggplot(aes(x=elevation, y=aleatorios, color = municipio)) + #Gráfico base con color para cada punto
geom_point(shape=5) +  # Geom que corresponde a los puntos y shape para modificar la forma del punto
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white"))+#definimos fondo y bordes
scale_colour_discrete(name = "Municipios") + #Establecemos el título de la leyenda
labs(title = "Elevación vs números aleatorios",
subtitle = "Data: SantanderBIO") +
labs(x = "Elevación", y = "Números aleatorios")
?geom_smooth
dat %>% mutate(aleatorios = runif(1255, min = 0, max = 3600)) %>%
ggplot(aes(x=elevation, y=aleatorios)) +
geom_point(shape=5) +
geom_smooth(method = "lm", se = TRUE) + #método lm e intervalo de confianza
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white")) +
scale_colour_discrete(name = "Municipios") +
labs(title = "Elevación vs números aleatorios",
subtitle = "Data: SantanderBIO") +
labs(x = "Elevación", y = "Números aleatorios")
dat %>% mutate(aleatorios = runif(1255, min = 0, max = 3600)) %>%
ggplot(aes(x=elevation, y=aleatorios, color = municipio)) +
geom_point(shape=5) +
geom_smooth(method = "lm", se = TRUE) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white")) +
scale_colour_discrete(name = "Municipios") +
labs(title = "Elevación vs números aleatorios",
subtitle = "Data: SantanderBIO") +
labs(x = "Elevación", y = "Números aleatorios")
ggplot(data = dat) +
geom_histogram(aes(x = elevation, fill = municipio),
bins = 12, position = "identity", alpha = 0.4) + # alpha para ver las barras que se sobreponen
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white")) +
labs(title = "Elevación por municipio",
subtitle = "Data: SantanderBIO") +
labs(x = "Elevación", y = "Conteo")
?facet_wrap
ggplot(data = dat) +
geom_histogram(aes(x = elevation, fill = municipio), bins = 12) +
facet_wrap(~municipio, ncol = 1)+ #para cada especie, realice tres histogramas en una columna
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "white")) +
labs(title = "Elevación por municipio",
subtitle = "Data: SantanderBIO") +
labs(x = "Elevación", y = "Conteo")
mitema <- theme(panel.grid.major = element_line(colour = "green"),
panel.grid.minor = element_line(colour = "pink"),
panel.background = element_rect(fill = "blue"),
panel.border = element_blank(),axis.line = element_line(size = 0.9, linetype = "solid", colour = "black"))
ggplot(data = dat, aes(x = elevation, y = elevation))+
mitema
nz <- map_data("nz") #Cargamos un set de datos que contienede coordenadas longitud y latitud, y columnas que indican a que región corresponden esas coordenadas
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
dat$class <- as.factor(dat$class)
levels(dat$class) #Revisamos las categorías
dat %>%
ggplot(aes(x = class)) +
geom_bar() +
coord_flip()
dat %>%
mutate(class = fct_infreq(class)) %>%
ggplot(aes(x = class)) +
geom_bar() +
coord_flip()
dat %>%
ggplot(aes(x = class, y = elevation)) +
geom_boxplot()
dat %>%
mutate(class = fct_reorder(class, elevation)) %>%
ggplot(aes(x = class, y = elevation)) +
geom_boxplot()
dat %>%
mutate(class = fct_infreq(class)) %>%
ggplot(aes(x = class)) +
geom_bar() +
coord_flip()
dat %>%
ggplot(aes(x = class, y = elevation)) +
geom_boxplot()
dat %>%
mutate(class = fct_reorder(class, elevation)) %>%
ggplot(aes(x = class, y = elevation)) +
geom_boxplot()
? fct_reorder
dat %>%
mutate(class = fct_lump(class, n = 5)) %>%
ggplot(aes(x = class)) +
geom_bar() +
coord_flip()
dat %>%
mutate(class = fct_lump(class, n = -5)) %>%
ggplot(aes(x = class)) +
geom_bar() +
coord_flip()
gitcreds::gitcreds_set()
ru1 <- runif(n = 10, min = 1, max = 6) #los numeros que obtendremos tienen decimales
hist(ru1)
ru2 <- runif(n =100, min = 1, max = 6)
hist(ru2)
ru3 <- runif(n =1000, min = 1, max = 6)
hist(ru3)
rnorm(n = 4, mean = 100, sd = 5)
set.seed(6)
rnorm(n = 10, mean = 5, sd = 5)
set.seed(6)
rnorm(n = 10, mean = 5, sd = 5)
set.seed(4)
rnorm(n = 10, mean = 5, sd = 5)
rn<-rnorm(n = 100)
rn<-rnorm(n = 1000, mean = 0, sd = 1)
rn
hist(rn)
mean(rn)
sd(rn)
rn<-rnorm(n = 100, mean = 5, sd = 2)
hist(rn)
mean(rn)
sd(rn)
r<-rnorm(1000000, mean=5, sd=2)
hist(r)
mean(r)
sd(r)
data(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
library(ggplot2)
ggplot(iris, aes(Sepal.Width)) +
geom_bar(stat = "count")
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
v1 <- rnorm(n = 1000, mean = 112, sd = 35)
hist(v1)
v2 <- rnorm(n = 1000, mean=34, sd=3)
hist(v2)
v3 <- v1*v2
hist(v3, 50)
x <- runif(n = 15, min = 1, max = 50)
y <- (2*x)+7
plot(x,y)
pnorm(q = 9, mean = 2, sd = 2)
1-pnorm(-2,mean=2,sd=2)
pnorm(q = -2, mean = 2, sd = 2)
1-pnorm(-2,mean=2,sd=2)
pnorm(q = 5 ,m = 5,sd = 1)
# 2) ¿Cuál es la probabilidad de obtener un valor entre 2 y 8?
pnorm(8,5,2)-pnorm(2,5,2)
gitcreds::gitcreds_set()
g1 <- rnorm(30, mean=10, sd=2) # 30 observaciones (replicas) en donde el crecimiento en promedio es 10, el doble de lo normal
g2 <- rnorm(30, mean=5, sd=2) # 30 observaciones (replicas) en donde el crecimiento en promedio es 5, en ambas grupos la variacion en el crecimiento de cada grupo es lo mismo, con sd=2
y <- c(g1, g2) # Los concatenamos en un mismo vector
x <- rep(c(1, 2), each = 30) # Creamos la variable de nuestros grupos o variable independiente, el 1 corresponde a las plantulas de g1 y el 2 a los de g2
plot(y)
plot(x, y) # En este punto parecen haber diferencia entre el crecimiento del grupo 1 y 2
tot.mean <- mean(y) # Obtenemos el promedio de todas la observaciones
abline(tot.mean, 0)
# en la grafica:
plot(x, y)
# en la grafica:
plot(y)
abline(tot.mean, 0, col="red")
g1.mean <- mean(g1)
g2.mean <- mean(g2)
abline(g1.mean, 0, col = "red") # media del grupo 1
abline(g2.mean, 0, col = "green") # media del grupo 2
abline(tot.mean, 0, col="black")
abline(g1.mean, 0, col = "red", xlim=c(1,30)) # media del grupo 1
# en la grafica:
plot(y)
abline(tot.mean, 0, col="black")
?abline
g1.mean <- mean(g1)
g2.mean <- mean(g2)
abline(g1.mean, 0, col = "red", xlim=c(1,30)) # media del grupo 1
?abline
?lines
lines(c(0, 30), g1.mean, col = "red")
# en la grafica:
plot(y)
abline(tot.mean, 0, col="black")
lines(c(0, 30), c(g1.mean, g1.mean) , col = "red")
lines(c(30, 60), c(g2.mean, g2.mean) , col = "red") # media del grupo 2
lines(c(0, 30), c(g1.mean, g1.mean) , col = "red") # media del grupo 1
lines(c(30, 60), c(g2.mean, g2.mean) , col = "green") # media del grupo 2
# en la grafica:
plot(y, pch=19, col="gris")
# en la grafica:
plot(y, pch=19, col="grey")
# en la grafica:
plot(y, pch=16, col="grey")
# en la grafica:
plot(y, pch=19, col="grey", cex=0.5)
abline(tot.mean, 0, col="black")
g1.mean <- mean(g1)
g2.mean <- mean(g2)
lines(c(0, 30), c(g1.mean, g1.mean) , col = "red") # media del grupo 1
lines(c(30, 60), c(g2.mean, g2.mean) , col = "green") # media del grupo 2
SST <- sum((y - tot.mean) ^2) #Hallamos el SST sumando la resta entre la media de todos los datos con cada observación elevada al cuadrado
SSE.g1 <- sum((g1 - g1.mean) ^2) # Realizamos el mismo paso para calcular el SST pero con el subconjunto de datos de cada grupo
SSE.g2 <- sum((g2 - g2.mean) ^2)
SSE <- SSE.g1 + SSE.g2 #sumamos los SSE de cada grupo
SSA <- SST - SSE
#### En la grafica
lines((y - tot.mean) ^2, type="h")
#### En la grafica
lines((y - tot.mean), type="h")
#### En la grafica
lines(rep(tot.mean, 60), (y - tot.mean), type="h")
?segments
# en la grafica:
plot(y, pch=19, col="grey", cex=0.5)
abline(tot.mean, 0, col="black")
?abline
g1.mean <- mean(g1)
g2.mean <- mean(g2)
lines(c(0, 30), c(g1.mean, g1.mean) , col = "red") # media del grupo 1
lines(c(30, 60), c(g2.mean, g2.mean) , col = "green") # media del grupo 2
#### En la grafica
segments(1:30, tot.mean, 1:30, y, col="lightgrey")
# en la grafica:
plot(y, pch=19, col="grey", cex=0.5)
abline(tot.mean, 0, col="black")
?abline
g1.mean <- mean(g1)
g2.mean <- mean(g2)
lines(c(0, 30), c(g1.mean, g1.mean) , col = "red") # media del grupo 1
lines(c(30, 60), c(g2.mean, g2.mean) , col = "green") # media del grupo 2
#### En la grafica
segments(1:30, tot.mean, 1:30, g1, col="lightgrey")
#### En la grafica
segments(1:60, tot.mean, 1:60, y, col="lightgrey")
segments(1:30, g1.mean, 1:30, g1, col="red")
segments(31:60, g2.mean, 31:60, g2, col="red")
# en la grafica:
plot(y, pch=19, col="grey", cex=0.5)
abline(tot.mean, 0, col="black")
?abline
g1.mean <- mean(g1)
g2.mean <- mean(g2)
lines(c(0, 30), c(g1.mean, g1.mean) , col = "red") # media del grupo 1
lines(c(30, 60), c(g2.mean, g2.mean) , col = "green") # media del grupo 2
#### En la grafica
segments(1:60, tot.mean, 1:60, y, col="lightgrey")
# en la grafica:
plot(y, pch=19, col="grey", cex=0.5)
abline(tot.mean, 0, col="grey")
?abline
g1.mean <- mean(g1)
g2.mean <- mean(g2)
lines(c(0, 30), c(g1.mean, g1.mean) , col = "red") # media del grupo 1
lines(c(30, 60), c(g2.mean, g2.mean) , col = "green") # media del grupo 2
SST <- sum((y - tot.mean) ^2) #Hallamos el SST sumando la resta entre la media de todos los datos con cada observación elevada al cuadrado
SSE.g1 <- sum((g1 - g1.mean) ^2) # Realizamos el mismo paso para calcular el SST pero con el subconjunto de datos de cada grupo
SSE.g2 <- sum((g2 - g2.mean) ^2)
SSE <- SSE.g1 + SSE.g2 #sumamos los SSE de cada grupo
SSA <- SST - SSE
#### En la grafica
segments(1:60, tot.mean, 1:60, y, col="lightgrey")
segments(1:30, g1.mean, 1:30, g1, col="red")
segments(31:60, g2.mean, 31:60, g2, col="green")
MSA <- SSA/1 #siendo k igual al número de grupos, que en nuestro caso es 2
MSE <- SSE/58 #en este caso, n es igual a 30 o número de observaciones por grupo
Fval <- MSA/MSE
Fval
qf.sig <- qf(0.01, 1, 58)
qf.sig
R2 = 1 - (SSE/SST)
R2 # 68% de la varianza en nuestros datos puede ser explicada por la variable x
aov(y ~ x)
summary(aov(y ~ x))
Fval
qf.sig
qf.sig <- qf(0.05, 1, 58)
qf.sig
?qf
qf.sig <- qf(60, 1, 58)
qf.sig
qf.sig <- qf(0.001, 1, 58)
qf.sig
qf.sig <- qf(Fval, 1, 58)
pf.sig <- qf(Fval, 1, 58)
pf.sig <- pf(Fval, 1, 58)
qf.sig
Fval
pf(Fval, 1, 58)
pf.sig <- 1-pf(Fval, 1, 58)
sig <- 1-pf(Fval, 1, 58)
sig
sig <- 1-pf(Fval, 1, 58)
sig
dat <- read_csv("Spec_Coltree.csv")
dat <- read_csv("Species_Coltree.csv")
View(dat)
familia <- dat %>%
filter(N_Familia == "ANACARDIACEAE")
familia %>%
ggplot(aes(x = Genero, y = Diametro)) +
geom_boxplot()
View(dat)
familia %>%
ggplot(aes(x = Genero, y = DAP)) +
geom_boxplot()
View(dat)
familia <- dat %>%
filter(N_Familia == "MAGNOLIACEAE")
familia %>%
ggplot(aes(x = Genero, y = DAP)) +
geom_boxplot()
View(dat)
familia <- dat %>%
filter(N_Familia == "MELASTOMATACEAE")
familia %>%
ggplot(aes(x = Genero, y = DAP)) +
geom_boxplot()
familia <- dat %>%
filter(N_Familia == "ANACARDIACEAE")
familia %>%
ggplot(aes(x = Genero, y = DAP)) +
geom_boxplot()
anova <- aov(familia$Diametro ~ familia$Genero)
summary(anova)
anova <- aov(familia$DAP ~ familia$Genero)
summary(anova)
?TukeyHSD()
TukeyHSD(anova)
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
setwd("~/UIS/GitHub/INNOVATIC/r-scripts")
setwd("~/Documents/Desktop/4_R_course")
dat=read.csv("env_paramos.csv")
dat=read.csv("env_Paramos.csv")
View(dat)
dat=read.csv("env_Paramos.csv", row.names=1)
View(dat)
dat=read.csv("env_Paramos.csv", row.names=1)
View(dat)
